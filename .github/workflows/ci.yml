name: CI

on:
  pull_request:
  push:


jobs:
  sanity:
    name: ${{ matrix.test.name }}
    runs-on: ubuntu-22.04
    env:
      TOXENV: ${{ matrix.test.tox_env }}
      PY_COLORS: 1

    strategy:
      fail-fast: false
      matrix:
        test:
          - name: Lint
            tox_env: linters-py310

          - name: Docs
            tox_env: docs

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # this is not ideal, but we need tags available to generate versions in tests

      - name: Install tox
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install "tox==4.5.0"

      - name: Create tox environment
        run: tox --notest

      - name: Run tests
        run: tox


  integration:
    runs-on: ubuntu-22.04
    name: Integration - ${{ matrix.py_version.name }}

    env:
      TOXENV: ${{ matrix.py_version.tox_env }}
      PY_COLORS: 1

    strategy:
      fail-fast: false
      matrix:
        py_version:
          - name: '3.8'
            tox_env: integration-py38

          - name: '3.9'
            tox_env: integration-py39

          - name: '3.10'
            tox_env: integration-py310

          - name: '3.11'
            tox_env: integration-py311

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python ${{ matrix.py_version.name }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py_version.name }}

      - name: Install tox
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install "tox==4.5.0" build

      - name: Prepare runner test container
        run: |
          TMPDIR=$(mktemp -d)
          cp test/integration/Dockerfile $TMPDIR
          pyproject-build -w -o $TMPDIR
          pushd $TMPDIR
          docker build --build-arg WHEEL=$(ls -1 ansible_runner*.whl) --rm=true -t ansible-runner-gha${{ github.run_id }}-event-test .
          podman build --build-arg WHEEL=$(ls -1 ansible_runner*.whl) --rm=true -t ansible-runner-gha${{ github.run_id }}-event-test .
          popd
          rm -r $TMPDIR

      - name: Create tox environment
        run: |
          tox --notest

      - name: Run integration tests
        run: |
          RUNNER_TEST_IMAGE_NAME=ansible-runner-gha${{ github.run_id }}-event-test tox

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: test/coverage/reports/coverage.xml
          flags: ${{ matrix.py_version.tox_env }}


  unit:
    name: Unit - ${{ matrix.py_version.name}}
    runs-on: ubuntu-22.04
    env:
      TOXENV: ${{ matrix.py_version.tox_env }}
      PY_COLORS: 1

    strategy:
      fail-fast: false
      matrix:
        py_version:
          - name: '3.8'
            tox_env: unit-py38

          - name: '3.9'
            tox_env: unit-py39

          - name: '3.10'
            tox_env: unit-py310

          - name: '3.11'
            tox_env: unit-py311

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python ${{ matrix.py_version.name }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py_version.name }}

      - name: Install tox
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install "tox==4.5.0"

      - name: Create tox environment
        run: tox --notest

      - name: Run tests
        run: tox

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: test/coverage/reports/coverage.xml
          flags: ${{ matrix.py_version.tox_env }}
